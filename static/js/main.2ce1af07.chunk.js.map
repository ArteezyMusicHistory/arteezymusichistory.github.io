{
    "version": 3,
    "sources": [
        "data/playlistsData.js",
        "components/Playlist.jsx",
        "components/Playlists.jsx",
        "App.js",
        "serviceWorker.js",
        "index.js"
    ],
    "names": [
        "playlistsData",
        "1",
        "playlistTitle",
        "playlistLink",
        "2",
        "3",
        "4",
        "Playlist",
        "copyToClipboard",
        "text",
        "navigator",
        "clipboard",
        "writeText",
        "then",
        "console",
        "log",
        "err",
        "error",
        "embedURL",
        "this",
        "props",
        "element",
        "icon",
        "faCopy",
        "onClick",
        "className",
        "src",
        "title",
        "width",
        "height",
        "frameBorder",
        "allowtransparency",
        "allow",
        "Component",
        "Playlists",
        "playlistsMap",
        "playlistsKeys",
        "Object",
        "keys",
        "reverse",
        "state",
        "playlistsCards",
        "map",
        "key",
        "particleOpt",
        "particles",
        "number",
        "value",
        "density",
        "enable",
        "value_area",
        "color",
        "shape",
        "type",
        "stroke",
        "polygon",
        "nb_sides",
        "image",
        "opacity",
        "random",
        "anim",
        "speed",
        "opacity_min",
        "sync",
        "size",
        "size_min",
        "line_linked",
        "distance",
        "move",
        "direction",
        "straight",
        "out_mode",
        "bounce",
        "attract",
        "rotateX",
        "rotateY",
        "interactivity",
        "detect_on",
        "events",
        "onhover",
        "mode",
        "onclick",
        "resize",
        "modes",
        "grab",
        "bubble",
        "duration",
        "repulse",
        "push",
        "particles_nb",
        "remove",
        "retina_detect",
        "App",
        "spotifyElement",
        "faSpotify",
        "window",
        "location",
        "twitterElement",
        "faTwitter",
        "twitchElement",
        "faTwitch",
        "href",
        "alt",
        "border",
        "params",
        "Boolean",
        "hostname",
        "match",
        "ReactDOM",
        "render",
        "document",
        "getElementById",
        "serviceWorker",
        "ready",
        "registration",
        "unregister"
    ],
    "mappings": "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",
    "file": "static/js/main.2ce1af07.chunk.js",
    "sourcesContent": [
        "const playlistsData = [{\n    1: {\n        playlistTitle: \"October 15th 2019 Arteezy Stream\",\n        playlistLink: \"12ipUXa6wIEKC5ROnwDwWI?si=OVu7wqgGRjqpCphblHUR_w\"\n    },\n    2: {\n        playlistTitle: \"November 2nd 2019 Arteezy Stream Part 1\",\n        playlistLink: \"4iP0tJ8Pkk0RyCHeYEQn1f?si=pXAeXPcEQf25aAzrDocLWw\"\n    },\n    3: {\n        playlistTitle: \"November 2nd 2019 Arteezy Stream Part 2\",\n        playlistLink: \"1QIXWVBTHi9azshXrUtd2A?si=3NPyqqVAT-qD7ZsCDeBvag\"\n    },\n    4: {\n        playlistTitle: \"November 3rd 2019 Arteezy Stream Part 1\",\n        playlistLink: \"3KsgKpM3vH2uCKhl6Mn9iQ?si=Zv6RnvcATcaTmVYS8Z45iQ\"\n    },\n    5: {\n        playlistTitle: \"March 4th 2020 Arteezy Stream\",\n        playlistLink: \"2WCjXh0xHNKGi7NePwN4RD?si=hHdjokYkQcqf5GbPtkP2IA\"\n    }\n}]\n\nexport default playlistsData;",
        "import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons'\n\nimport './playlist.css';\n\nclass Playlist extends Component {\n\n    copyToClipboard = (text) => {\n        navigator.clipboard.writeText(text).then(function () {\n            console.log('Async: Copying to clipboard was successful!');\n        }, function (err) {\n            console.error('Async: Could not copy text: ', err);\n        });\n    }\n\n\n    render() {\n        const embedURL = `https://open.spotify.com/embed/playlist/${this.props.playlistLink}`\n        const element = <FontAwesomeIcon icon={faCopy} onClick={() => { this.copyToClipboard(this.props.playlistTitle) }} />\n\n        return (\n            <div className=\"playlist\">\n                <div className=\"title\"><b>{this.props.playlistTitle}</b> {element}</div>\n                <iframe src={embedURL} title=\"sdf\"\n                    width=\"500\" height=\"300\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\">\n                </iframe>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;",
        "import React, { Component } from \"react\";\nimport playlistsData from \"../data/playlistsData\";\n\nimport Playlist from './Playlist';\n\nclass Playlists extends Component {\n    constructor(props) {\n        super()\n        let playlistsMap = playlistsData[0];\n        let playlistsKeys = Object.keys(playlistsMap).reverse()\n        this.state = {\n            playlistsCards: playlistsKeys.map(key => <Playlist key={key}\n                playlistLink={playlistsMap[key].playlistLink}\n                playlistTitle={playlistsMap[key].playlistTitle} />)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.playlistsCards}\n            </div>\n        );\n    }\n}\n\nexport default Playlists;",
        "import React, { Component } from 'react';\nimport './App.css';\nimport Playlists from './components/Playlists';\nimport Particles from 'react-particles-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpotify, faTwitter, faTwitch } from '@fortawesome/free-brands-svg-icons'\n\nconst particleOpt = {\n    particles: {\n        number: {\n            value: 25,\n            density: {\n                enable: false,\n                value_area: 0\n            }\n        },\n        color: {\n            value: \"#ffffff\"\n        },\n        shape: {\n            type: \"circle\",\n            stroke: {\n                width: 0,\n                color: \"#000000\"\n            },\n            polygon: {\n                nb_sides: 3\n            },\n            image: {\n                src: \"img/github.svg\",\n                width: 100,\n                height: 100\n            }\n        },\n        opacity: {\n            value: 0.5,\n            random: false,\n            anim: {\n                enable: false,\n                speed: 1,\n                opacity_min: 0.1,\n                sync: false\n            }\n        },\n        size: {\n            value: 3,\n            random: true,\n            anim: {\n                enable: false,\n                speed: 40,\n                size_min: 0.1,\n                sync: false\n            }\n        },\n        line_linked: {\n            enable: true,\n            distance: 150,\n            color: \"#ffffff\",\n            opacity: 0.4,\n            width: 1.9240944730386271\n        },\n        move: {\n            enable: true,\n            speed: 6,\n            direction: \"none\",\n            random: false,\n            straight: false,\n            out_mode: \"out\",\n            bounce: false,\n            attract: {\n                enable: false,\n                rotateX: 600,\n                rotateY: 1200\n            }\n        }\n    },\n    interactivity: {\n        detect_on: \"canvas\",\n        events: {\n            onhover: {\n                enable: true,\n                mode: \"repulse\"\n            },\n            onclick: {\n                enable: false,\n                mode: \"repulse\"\n            },\n            resize: true\n        },\n        modes: {\n            grab: {\n                distance: 400,\n                line_linked: {\n                    opacity: 1\n                }\n            },\n            bubble: {\n                distance: 400,\n                size: 40,\n                duration: 2,\n                opacity: 8,\n                speed: 3\n            },\n            repulse: {\n                distance: 200,\n                duration: 0.4\n            },\n            push: {\n                particles_nb: 4\n            },\n            remove: {\n                particles_nb: 2\n            }\n        }\n    },\n    retina_detect: true\n}\n\nclass App extends Component {\n    render() {\n        const spotifyElement = <FontAwesomeIcon className=\"spotify-icon\" icon={faSpotify} onClick={() => window.location = \"https://open.spotify.com/user/1qwh2zhtk48r17ymr52liaq0c?si=ecp4k8x2Ss-0mls6606jcg\"} />\n        const twitterElement = <FontAwesomeIcon className=\"twitter-icon\" icon={faTwitter} onClick={() => window.location = \"https://twitter.com/RTZMusicHistory\"} />\n        const twitchElement = <FontAwesomeIcon className=\"twitch-icon\" icon={faTwitch} onClick={() => window.location = \"https://www.twitch.tv/arteezymusichistory\"} />\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <b><a href=\"https://twitch.tv/arteezy\">Arteezy</a> Music History ♫</b>\n                    <div className=\"App-social\"> {spotifyElement} {twitterElement} {twitchElement} </div>\n                    <div className=\"App-info\">Refresh and scroll down to the bottom of the latest playlist to see the latest song (if it is avaliable on Spotify)</div>\n                    <span className=\"not-working\">Not working? Try opening Spotify and searching for the playlists manually or try use <a href=\"https://twitchaudio.com/stream/arteezy\">https://twitchaudio.com/stream/arteezy</a></span>\n                </header>\n                <Playlists />\n                <footer className=\"App-footer\">\n                    <a href=\"https://info.flagcounter.com/gOGn\"><img src=\"https://s01.flagcounter.com/count2/gOGn/bg_FFFFFF/txt_000000/border_CCCCCC/columns_5/maxflags_25/viewers_0/labels_0/pageviews_1/flags_0/percent_0/\" alt=\"Flag Counter\" border=\"0\" /></a>\n                    <span>This website is run by a fan and is not officially affiliated with <a href=\"https://twitter.com/arteezy\"> Arteezy</a></span>\n                </footer>\n                <Particles className=\"particles-js\"\n                    params={particleOpt}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n",
        "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
    ],
    "sourceRoot": ""
}
